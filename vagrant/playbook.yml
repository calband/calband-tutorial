---
- hosts: all # which URLs to run this ansible script for, but will only be used in
             # setting up Vagrant (not CircleCI or Heroku).
  gather_facts: False # don't need information about the remote computer

  vars:
    ROOT_DIR: /vagrant
    HOME_DIR: /home/vagrant
    dbname: members_only_db
    dbuser: members_only_user
    dbpassword: calbandgreat

  tasks:

    # APT
    # https://github.com/ansible/ansible/issues/16884
    - name: "FIX: Ubuntu 16.04 LTS doesn't come with certain modules, required by ansible"
      raw: apt-get install python-minimal aptitude -y

    - name: update the apt cache
      apt: 
        upgrade: yes
        update_cache: yes

    - name: install base packages
      apt: pkg={{item}} state=present update_cache=yes
      with_items:
        # For pylibmc/memcached: http://sendapatch.se/projects/pylibmc/install.html
        - memcached
        - libmemcached-dev
        - zlib1g-dev
        - libsasl2-dev
        # To make Python/run C scripts/unzip tar file
        - build-essential
        # Install SSL for pip installation: https://github.com/explosion/spaCy/issues/2208
        - libssl-dev
        # For postgres
        - libpq-dev
        - python-psycopg2

    # DATABASE
    # https://www.postgresql.org/download/linux/ubuntu/
    - name: add postgres repo
      apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' state=present update_cache=yes

    - name: add postgres key
      apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present

    - name: update postgresql 10
      apt:
        pkg: postgresql-10
        state: present
        update_cache: yes

    # https://docs.djangoproject.com/en/2.0/topics/install/#database-installation
    - name: ensure database is created
      become_user: postgres
      postgresql_db: name={{ dbname }} # will create a database with the given name

    - name: ensure user has access
      become_user: postgres
      # create a user for the `members_only_db` database, with the username
      # `members_only_user` and the password `calbandgreat`. Grant them all
      # privileges and allow them to create databases
      postgresql_user:
        db: "{{ dbname }}"
        name: "{{ dbuser }}"
        password: "{{ dbpassword }}"
        priv: ALL
        role_attr_flags: CREATEDB

    # PYTHON
    # https://www.rosehosting.com/blog/how-to-install-python-3-6-on-ubuntu-16-04/
    - name: check if python 3.6.6 is installed
      # TODO: A better way to check this
      stat:
        path: /usr/local/bin/python3.6
      register: python

    - name: get python 3.6.6 tgz
      get_url:
        url: https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz
        dest: /tmp/Python-3.6.6.tgz
      when: python.stat.exists == False

    - name: create python tgz folder
      file:
        path: /tmp/Python-3.6.6
        state: directory
        mode: 0777
      when: python.stat.exists == False

    - name: unarchive python tgz
      unarchive:
        src: /tmp/Python-3.6.6.tgz
        dest: /tmp
        mode: 0777
      when: python.stat.exists == False

    - name: run python configure script
      # TODO: Get rid of raw and use script
      raw: cd /tmp/Python-3.6.6; ./configure
      when: python.stat.exists == False

    - name: python make
      make:
        chdir: /tmp/Python-3.6.6
        target: all
      when: python.stat.exists == False

    - name: python make install
      make:
        chdir: /tmp/Python-3.6.6
        target: install
      when: python.stat.exists == False

    - name: remove python tgz file
      file:
        path: /tmp/Python-3.6.6.tgz
        state: absent
      when: python.stat.exists == False

    - name: remove python unzipped folder
      file:
        path: /tmp/Python-3.6.6
        state: absent
      when: python.stat.exists == False
